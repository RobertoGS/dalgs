<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"

	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-3.2.xsd">


	<http pattern="/resources" security="none" />
<<<<<<< HEAD



	<!-- Rest authentication entry point configuration -->
	<!-- <http use-expressions="true" pattern="/api/**" create-session="stateless"
		entry-point-ref="restAuthenticationEntryPoint">
		<http-basic />
		<intercept-url pattern="/api/**"
			access="hasRole('ROLE_ADMIN') or hasRole('ROLE_PROFESSOR') " />

		<form-login authentication-success-handler-ref="restAuthenticationSuccessHandler"
			authentication-failure-handler-ref="restAuthenticationFailureHandler" />

		<logout logout-url="/api/logout" delete-cookies="true"
			invalidate-session="true" success-handler-ref="restLogoutSuccessHandler" />
	</http> -->

	<!-- Configures a custom authentication success handler that returns HTTP 
		status code 200 -->
	<!-- <beans:bean id="restAuthenticationSuccessHandler"
		class="es.ucm.fdi.dalgs.rest.security.RestAuthenticationSuccessHandler" />

	Configures a custom authentication failure handler that returns HTTP 
		status code 401
	<beans:bean id="restAuthenticationFailureHandler"
		class="es.ucm.fdi.dalgs.rest.security.RestAuthenticationFailureHandler" />

	Configures a custom logout success handler that returns HTTP status 
		code 200
	<beans:bean id="restLogoutSuccessHandler"
		class="es.ucm.fdi.dalgs.rest.security.RestLogoutSuccessHandler" />
 -->


	<!-- the http tag This means the path /resources should be ignored by Spring 
		Security; therefore it will not be secured. Why do you want to do this? Mainly 
		because these are static images, CSS, and JavaScript files that don't need 
		to be secured. -->
		<http pattern="/resources" security="none" />
		
		 <!-- REST services security -->
    <!-- <http  use-expressions="true" pattern="/rest/**" create-session="stateless">
            <http-basic />
            <intercept-url pattern="/rest/**" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_PROFESSOR')" />      
    </http> -->
    
    
    <!-- Rest authentication entry point configuration -->
<!--     <http use-expressions="true" pattern="/rest/**" entry-point-ref="restAuthenticationEntryPoint"> -->
<!--         <http-basic/> -->
<!--         <intercept-url pattern="/rest/**" /> -->
<!--         <form-login authentication-success-handler-ref="mySuccessHandler" -->
<!--             authentication-failure-handler-ref="myFailureHandler" /> -->
 
<!--         <logout /> -->
<!--     </http> -->
 
<!--     Connect the custom authentication success handler -->
<!--     <beans:bean id="mySuccessHandler" class="es.ucm.fdi.dalgs.rest.security.RestAuthenticationSuccessHandler" /> -->
<!--     Using default failure handler -->
<!--     <beans:bean id="myFailureHandler" -->
<!--         class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler" /> -->
 
 
<!--       <authentication-manager id="restAuthenticationManager">
      <authentication-provider>
            <user-service>
                <user name="admin" password="admin" authorities="ROLE_ADMIN" />
            </user-service>
        </authentication-provider> 
    </authentication-manager> -->
		

=======



	<!-- Rest authentication entry point configuration -->
	<http use-expressions="true" pattern="/api/**" create-session="stateless"
		entry-point-ref="restAuthenticationEntryPoint">
		<http-basic />
		<intercept-url pattern="/api/**"
			access="hasRole('ROLE_ADMIN') or hasRole('ROLE_PROFESSOR') " />

		<form-login authentication-success-handler-ref="restAuthenticationSuccessHandler"
			authentication-failure-handler-ref="restAuthenticationFailureHandler" />

		<logout logout-url="/api/logout" delete-cookies="true"
			invalidate-session="true" success-handler-ref="restLogoutSuccessHandler" />
	</http>

	<!-- Configures a custom authentication success handler that returns HTTP 
		status code 200 -->
	<beans:bean id="restAuthenticationSuccessHandler"
		class="es.ucm.fdi.dalgs.rest.security.RestAuthenticationSuccessHandler" />

	<!-- Configures a custom authentication failure handler that returns HTTP 
		status code 401 -->
	<beans:bean id="restAuthenticationFailureHandler"
		class="es.ucm.fdi.dalgs.rest.security.RestAuthenticationFailureHandler" />

	<!-- Configures a custom logout success handler that returns HTTP status 
		code 200 -->
	<beans:bean id="restLogoutSuccessHandler"
		class="es.ucm.fdi.dalgs.rest.security.RestLogoutSuccessHandler" />


>>>>>>> oauth2

	<!-- the second http tag This contains the core security rules of our application. -->

	<http auto-config="true" use-expressions="true">

		<!-- intercept urls Here we declare URL patterns to be protected. Notice 
			the use of SPEL hasRole and permitAll (see more) -->
		<intercept-url pattern="/login.htm" access="permitAll" />
		<intercept-url pattern="/logout.htm" access="permitAll" />
		<intercept-url pattern="/*" access="hasRole('ROLE_USER')" />

		<!-- form login This declares our login settings: login-page: the URL path 
			of our login page authentication-failure-url: the URL where a user will be 
			redirected after a failed login default-target-url: the URL where a user 
			will be redirected after a successful login -->
		<form-login login-page="/login.htm"
			authentication-failure-url="/login/failure.htm" default-target-url="/" />


		<!-- denied handler This declares the URL where a user will be redirected 
			after a denied access. -->
		<access-denied-handler error-page="/denied.htm" />

		<logout invalidate-session="true" logout-success-url="/logout/success.htm"
			logout-url="/logout.htm" delete-cookies="JSESSIONID"  />
				<!-- enable csrf protection -->
		<csrf />
		
		 <!--Remember me for: Half an hour -->
			<remember-me 
		    token-validity-seconds="1209600"
			remember-me-parameter="remember-me" 
			data-source-ref="dataSource" />
	</http>


	<!-- authentication manager This is similar with the login element. - logout-success-url: 
		the URL where a user will be redirected after a successful logout - logout-url: 
		the URL path of our logout page - authentication-manager: registers an AuthenticationManager 
		that provides authentication services (see more) - authentication-provider: 
		this is a shorthand for configuring a DaoAuthenticationProvider which loads 
		user information from a UserDetailsService (see more) - user-service-ref: 
		this allows us to declare a custom UserDetailsService - password-encoder: 
		this allows us to declare various password encoders such as md5 and sha -->

	<authentication-manager>
		<authentication-provider user-service-ref="customUserDetailsService">
			<password-encoder ref="passwordEncoder" />
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<beans:constructor-arg value="256" />
	</beans:bean>

<<<<<<< HEAD


</beans:beans>	

=======

</beans:beans>	
>>>>>>> oauth2
	
	
	
	
	
	