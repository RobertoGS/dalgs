<?xml version="1.0" encoding="UTF-8"?>
<!--

    This file is part of D.A.L.G.S.

    D.A.L.G.S is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    D.A.L.G.S is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with D.A.L.G.S.  If not, see <http://www.gnu.org/licenses/>.

-->
<beans:beans xmlns="http://www.springframework.org/schema/security"

	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-3.2.xsd">


	<http pattern="/resources" security="none" />



	<!-- the second http tag This contains the core security rules of our application. -->

	<http auto-config="true" use-expressions="true">

		<!-- intercept urls Here we declare URL patterns to be protected. Notice 
			the use of SPEL hasRole and permitAll (see more) -->
		<intercept-url pattern="/login.htm" access="permitAll" />
		<intercept-url pattern="/logout.htm" access="permitAll" />
		<intercept-url pattern="/*" access="hasRole('ROLE_USER')" />

		<!-- form login This declares our login settings: login-page: the URL path 
			of our login page authentication-failure-url: the URL where a user will be 
			redirected after a failed login default-target-url: the URL where a user 
			will be redirected after a successful login -->
		<form-login login-page="/login.htm"
			authentication-failure-url="/login/failure.htm" default-target-url="/" />


		<!-- denied handler This declares the URL where a user will be redirected 
			after a denied access. -->
		<access-denied-handler error-page="/denied.htm" />

		<logout invalidate-session="true" logout-success-url="/logout/success.htm"
			logout-url="/logout.htm" delete-cookies="JSESSIONID"  />
		<!-- enable csrf protection -->
		<csrf />
		
		 <!--Remember me for: Half an hour -->
			<remember-me 
			user-service-ref="customUserDetailsService"
		    token-validity-seconds="1209600"
			remember-me-parameter="remember-me" 
			data-source-ref="dataSource" />
	</http>


	<!-- authentication manager This is similar with the login element. - logout-success-url: 
		the URL where a user will be redirected after a successful logout - logout-url: 
		the URL path of our logout page - authentication-manager: registers an AuthenticationManager 
		that provides authentication services (see more) - authentication-provider: 
		this is a shorthand for configuring a DaoAuthenticationProvider which loads 
		user information from a UserDetailsService (see more) - user-service-ref: 
		this allows us to declare a custom UserDetailsService - password-encoder: 
		this allows us to declare various password encoders such as md5 and sha -->

	<authentication-manager>
		<authentication-provider user-service-ref="customUserDetailsService">
			<password-encoder ref="passwordEncoder" />
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<beans:constructor-arg value="256" />
	</beans:bean>



</beans:beans>	
	
	
	
	
	
	