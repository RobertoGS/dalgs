<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
 xmlns:context="http://www.springframework.org/schema/context"
 xmlns:sec="http://www.springframework.org/schema/security" xmlns:mvc="http://www.springframework.org/schema/mvc"
 xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
  http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
  http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd 
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd ">

 <!-- This is default url to get a token from OAuth -->
 <http pattern="/oauth/token" create-session="stateless"
  authentication-manager-ref="clientAuthenticationManager"
  xmlns="http://www.springframework.org/schema/security">
  <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
  <anonymous enabled="false" />
  <http-basic entry-point-ref="clientAuthenticationEntryPoint" />
  <!-- include this only if you need to authenticate clients via request 
   parameters -->
  <custom-filter ref="clientCredentialsTokenEndpointFilter"
   after="BASIC_AUTH_FILTER" />
  <access-denied-handler ref="oauthAccessDeniedHandler" />
 </http>

 <!-- This is where we tells spring security what URL should be protected 
  and what roles have access to them -->
 <http pattern="/api/**" create-session="never"  
  entry-point-ref="oauthAuthenticationEntryPoint"
  access-decision-manager-ref="accessDecisionManager"
  xmlns="http://www.springframework.org/schema/security">
  <anonymous enabled="false" />
  <intercept-url pattern="/api/**" access="ROLE_USER" />
  <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
  <access-denied-handler ref="oauthAccessDeniedHandler" />
 </http>


 <bean id="oauthAuthenticationEntryPoint"
  class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
  <property name="realmName" value="test" />
 </bean>

 <bean id="clientAuthenticationEntryPoint"
  class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
  <property name="realmName" value="test/client" />
  <property name="typeName" value="Basic" />
 </bean>

 <bean id="oauthAccessDeniedHandler"
  class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

 <bean id="clientCredentialsTokenEndpointFilter"
  class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
  <property name="authenticationManager" ref="clientAuthenticationManager" />
 </bean>

 <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
  xmlns="http://www.springframework.org/schema/beans">
  <constructor-arg>
   <list>
    <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
    <bean class="org.springframework.security.access.vote.RoleVoter" />
    <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
   </list>
  </constructor-arg>
 </bean>

 <authentication-manager id="clientAuthenticationManager"
  xmlns="http://www.springframework.org/schema/security">
  <authentication-provider user-service-ref="clientDetailsUserService" />
 </authentication-manager>

 
 <authentication-manager alias="authenticationManager"
  xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="customUserDetailsService">
			<password-encoder ref="passwordEncoder"/> 
		</authentication-provider>
	</authentication-manager>
	
	<bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<constructor-arg value="256" />
	</bean>
<<<<<<< HEAD

	<!-- This the service class which is used to access the function of JdbcTokenStore 
		class. This is like MVC structure JdbcTokenStore is Dao layer and DefaultTokenServices 
		is service layer -->
	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetails" />
		<property name="accessTokenValiditySeconds" value="4500" />
	</bean>





	<!-- A user approval handler that remembers approval decisions by consulting 
		existing tokens -->
	<!-- <bean id="oAuth2RequestFactory"
		class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
		<constructor-arg ref="clientDetails" />
	</bean> -->
	<bean id="oAuth2RequestFactory"
		class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
		<constructor-arg ref="clientDetails" />
	</bean>
	
	
	<bean id="userApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
 		<property name="requestFactory" ref="oAuth2RequestFactory" />
		<property name="tokenStore" ref="tokenStore" />
	</bean>




<!-- Token management -->



	<!-- Authorization Server Configuration of the server is used to provide 
		implementations of the client details service and token services and to enable 
		or disable certain aspects of the mechanism globally. -->
	<oauth:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<!-- A Resource Server serves resources that are protected by the OAuth2 
		token. Spring OAuth provides a Spring Security authentication filter that 
		implements this protection. -->
	<oauth:resource-server id="resourceServerFilter"
		token-services-ref="tokenServices" resource-id="rsourceId" />
		
<!-- 	
<bean id="clientDetails"
		class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService">
		<constructor-arg index="0">
			<ref bean="dataSource" />
		</constructor-arg>
	</bean>  -->
		
		<!-- Client Definition -->
	<oauth:client-details-service id="clientDetails">

    <oauth:client client-id="my-trusted-client"
                  authorized-grant-types="password,authorization_code,refresh_token,implicit,redirect"
                  authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT"
                  redirect-uri="/web" 
                  secret="secret" 
                  scope="read,write,trust"
                  access-token-validity="30"
                  refresh-token-validity="600"/>

</oauth:client-details-service>
	




	<sec:global-method-security pre-post-annotations="enabled"
		proxy-target-class="true">
    <sec:expression-handler ref="oauthExpressionHandler"/>
</sec:global-method-security>
	<oauth:expression-handler id="oauthExpressionHandler"/>
<oauth:web-expression-handler id="oauthWebExpressionHandler"/>


	<!-- Grants access if only grant (or abstain) votes were received. We can 
		protect REST resource methods with JSR-250 annotations such as @RolesAllowed -->
<!-- 	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<property name="decisionVoters">
			<list>
				<bean class="org.springframework.security.access.annotation.Jsr250Voter" />
			</list>
		</property>
	</bean> -->



	<!-- <sec:authentication-manager> <sec:authentication-provider> <sec:user-service> 
		<user name="tmain" password="123456" authorities="ROLE_USER" /> </sec:user-service> 
		</sec:authentication-provider> </sec:authentication-manager> -->

=======
>>>>>>> oauth2
	

 <bean id="clientDetailsUserService"
  class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
  <constructor-arg ref="clientDetails" />
 </bean>


 <!-- This defined token store, we have used inmemory tokenstore for now 
  but this can be changed to a user defined one -->
      <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore"/>
      
 <!-- This is where we defined token based configurations, token validity 
  and other things -->
 <bean id="tokenServices"
  class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
  <property name="tokenStore" ref="tokenStore" />
  <property name="supportRefreshToken" value="true" />
  <property name="accessTokenValiditySeconds" value="120" />
  <property name="clientDetailsService" ref="clientDetails" />
 </bean>
 <bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler">
  <property name="tokenServices" ref="tokenServices" />
 </bean>


 <oauth:authorization-server
  client-details-service-ref="clientDetails" token-services-ref="tokenServices"
  user-approval-handler-ref="userApprovalHandler">
  <oauth:authorization-code />
  <oauth:implicit />
  <oauth:refresh-token />
  <oauth:client-credentials />
  <oauth:password />
 </oauth:authorization-server>

 <oauth:resource-server id="resourceServerFilter"
  resource-id="test" token-services-ref="tokenServices" />

 <oauth:client-details-service id="clientDetails">
  <!-- client -->
  <oauth:client client-id="restapp"
   authorized-grant-types="authorization_code,client_credentials"
   authorities="ROLE_USER" scope="read,write,trust" secret="secret" />

  <oauth:client client-id="restapp"
   authorized-grant-types="password,authorization_code,refresh_token,implicit"
   secret="restapp" authorities="ROLE_USER" />

 </oauth:client-details-service>

 <sec:global-method-security
  pre-post-annotations="enabled" proxy-target-class="true">
  
  <sec:expression-handler ref="oauthExpressionHandler" />
 </sec:global-method-security>

 <oauth:expression-handler id="oauthExpressionHandler" />
 <oauth:web-expression-handler id="oauthWebExpressionHandler" />
</beans>

<<<<<<< HEAD
	<!-- This tag is used for creating InMemory Client-Details-Service -->
	<!-- <oauth:client-details-service id="clientDetailService"> <oauth:client 
		client-id="my-client-with-registered-redirect" authorized-grant-types="authorization_code,,client_credentials" 
		authorities="ROLE_CLIENT" redirect-uri="http://anywhere?key=value" scope="read,trust" 
		/> </oauth:client-details-service> $2a$11$/s4ymyxwLLUxafPRR15v3.tWv.zmEkZj8IV09qPOD9oQ3SmilmtPy -->
		</beans>

=======
>>>>>>> oauth2
